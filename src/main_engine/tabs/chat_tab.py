"""Tab h·ªèi ƒë√°p v·ªõi AI v·ªÅ d·ªØ li·ªáu CV."""  # M√¥ t·∫£ ch·ª©c nƒÉng c·ªßa module

# Import c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt
import logging  # Th∆∞ vi·ªán ghi log ƒë·ªÉ theo d√µi ho·∫°t ƒë·ªông c·ªßa ·ª©ng d·ª•ng
import os  # Th∆∞ vi·ªán ƒë·ªÉ thao t√°c v·ªõi h·ªá ƒëi·ªÅu h√†nh v√† file system
import pandas as pd  # Th∆∞ vi·ªán x·ª≠ l√Ω d·ªØ li·ªáu d·∫°ng b·∫£ng (DataFrame)
import streamlit as st  # Framework t·∫°o ·ª©ng d·ª•ng web
from typing import cast  # H√†m cast ƒë·ªÉ √©p ki·ªÉu d·ªØ li·ªáu
from modules.progress_manager import StreamlitProgressBar  # Module qu·∫£n l√Ω thanh ti·∫øn tr√¨nh

from modules.qa_chatbot import QAChatbot  # Module chatbot h·ªèi ƒë√°p
from modules.config import OUTPUT_CSV  # Import ƒë∆∞·ªùng d·∫´n file CSV output


def render(provider: str, model: str, api_key: str) -> None:
    """Hi·ªÉn th·ªã giao di·ªán h·ªèi ƒë√°p v·ªõi AI v·ªÅ d·ªØ li·ªáu CV."""  # H√†m hi·ªÉn th·ªã giao di·ªán h·ªèi ƒë√°p AI
    st.subheader("H·ªèi AI v·ªÅ d·ªØ li·ªáu CV")  # Hi·ªÉn th·ªã ti√™u ƒë·ªÅ ph·ª•
    
    # Ki·ªÉm tra v√† kh·ªüi t·∫°o tr·∫°ng th√°i trigger_ai trong session_state
    if 'trigger_ai' not in st.session_state:
        st.session_state.trigger_ai = False  # ƒê·∫∑t gi√° tr·ªã m·∫∑c ƒë·ªãnh l√† False

    # H√†m callback khi ng∆∞·ªùi d√πng g·ª≠i c√¢u h·ªèi
    def submit_ai():
        st.session_state.trigger_ai = True  # ƒê·∫∑t flag ƒë·ªÉ k√≠ch ho·∫°t x·ª≠ l√Ω AI

    # T·∫°o √¥ nh·∫≠p c√¢u h·ªèi v·ªõi callback khi thay ƒë·ªïi
    question = st.text_input(
        "Nh·∫≠p c√¢u h·ªèi v√† nh·∫•n Enter ƒë·ªÉ g·ª≠i", key="ai_question", on_change=submit_ai
    )

    # Ki·ªÉm tra n·∫øu c√≥ trigger ƒë·ªÉ x·ª≠ l√Ω c√¢u h·ªèi AI
    if st.session_state.trigger_ai:
        st.session_state.trigger_ai = False  # Reset flag sau khi x·ª≠ l√Ω
        
        # Ki·ªÉm tra n·∫øu c√¢u h·ªèi tr·ªëng
        if not question.strip():
            st.warning("Vui l√≤ng nh·∫≠p c√¢u h·ªèi tr∆∞·ªõc khi g·ª≠i.")  # Hi·ªÉn th·ªã c·∫£nh b√°o
        # Ki·ªÉm tra n·∫øu file CSV kh√¥ng t·ªìn t·∫°i
        elif not os.path.exists(OUTPUT_CSV):
            st.warning("Ch∆∞a c√≥ d·ªØ li·ªáu CSV ƒë·ªÉ h·ªèi.")  # Hi·ªÉn th·ªã c·∫£nh b√°o
        else:
            # ƒê·ªçc d·ªØ li·ªáu t·ª´ file CSV v·ªõi encoding UTF-8
            df = pd.read_csv(OUTPUT_CSV, encoding="utf-8-sig")
            
            # Kh·ªüi t·∫°o chatbot v·ªõi c√°c tham s·ªë ƒë∆∞·ª£c truy·ªÅn v√†o
            chatbot = QAChatbot(
                provider=cast(str, provider),  # Nh√† cung c·∫•p AI (√©p ki·ªÉu string)
                model=cast(str, model),  # Model AI s·ª≠ d·ª•ng (√©p ki·ªÉu string)
                api_key=cast(str, api_key),  # API key ƒë·ªÉ x√°c th·ª±c (√©p ki·ªÉu string)
            )
            
            # Kh·ªüi t·∫°o thanh ti·∫øn tr√¨nh
            progress_bar = StreamlitProgressBar()
            progress_bar.initialize(2, "üí¨ ƒêang h·ªèi AI...")  # Kh·ªüi t·∫°o v·ªõi 2 b∆∞·ªõc
            
            try:
                # Ghi log th√¥ng tin v·ªÅ vi·ªác g·ª≠i c√¢u h·ªèi
                logging.info("ƒêang g·ª≠i c√¢u h·ªèi t·ªõi AI")
                progress_bar.update(1, "ƒêang ch·ªù ph·∫£n h·ªìi...")  # C·∫≠p nh·∫≠t b∆∞·ªõc 1
                
                # G·ª≠i c√¢u h·ªèi t·ªõi chatbot v√† nh·∫≠n c√¢u tr·∫£ l·ªùi
                answer = chatbot.ask_question(question, df)
                progress_bar.finish("‚úÖ ƒê√£ nh·∫≠n c√¢u tr·∫£ l·ªùi")  # Ho√†n th√†nh thanh ti·∫øn tr√¨nh
                
                # Hi·ªÉn th·ªã c√¢u tr·∫£ l·ªùi (cho ph√©p HTML)
                st.markdown(answer, unsafe_allow_html=True)
            except Exception as e:  # X·ª≠ l√Ω ngo·∫°i l·ªá
                progress_bar.finish("‚ùå L·ªói")  # Ho√†n th√†nh thanh ti·∫øn tr√¨nh v·ªõi tr·∫°ng th√°i l·ªói
                logging.error(f"L·ªói h·ªèi AI: {e}")  # Ghi log l·ªói
                st.error(f"L·ªói khi h·ªèi AI: {e}")  # Hi·ªÉn th·ªã th√¥ng b√°o l·ªói cho ng∆∞·ªùi d√πng
