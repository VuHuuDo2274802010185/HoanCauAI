"""Tab k·∫øt h·ª£p l·∫•y v√† x·ª≠ l√Ω CV t·ª´ email."""  # M√¥ t·∫£ ch·ª©c nƒÉng c·ªßa module

# Import c√°c th∆∞ vi·ªán c∆° b·∫£n
import logging  # Th∆∞ vi·ªán ghi log ƒë·ªÉ theo d√µi ho·∫°t ƒë·ªông c·ªßa ·ª©ng d·ª•ng
from typing import List  # Type hints cho danh s√°ch
from pathlib import Path  # Th∆∞ vi·ªán x·ª≠ l√Ω ƒë∆∞·ªùng d·∫´n file/folder hi·ªán ƒë·∫°i
from datetime import datetime, time, timezone, date  # Th∆∞ vi·ªán x·ª≠ l√Ω ng√†y th√°ng v√† th·ªùi gian
import base64  # Th∆∞ vi·ªán m√£ h√≥a/gi·∫£i m√£ base64 cho file download

# Import module qu·∫£n l√Ω thanh ti·∫øn tr√¨nh
from modules.progress_manager import StreamlitProgressBar

# Import th∆∞ vi·ªán x·ª≠ l√Ω d·ªØ li·ªáu v√† giao di·ªán
import pandas as pd  # Th∆∞ vi·ªán x·ª≠ l√Ω d·ªØ li·ªáu d·∫°ng b·∫£ng
import streamlit as st  # Framework t·∫°o ·ª©ng d·ª•ng web

# Import c√°c module c·∫•u h√¨nh v√† h·∫±ng s·ªë
from modules.config import (
    ATTACHMENT_DIR,  # Th∆∞ m·ª•c l∆∞u file ƒë√≠nh k√®m
    EMAIL_HOST,  # Host server email
    EMAIL_PORT,  # Port k·∫øt n·ªëi email
    OUTPUT_CSV,  # ƒê∆∞·ªùng d·∫´n file CSV output
    OUTPUT_EXCEL,  # ƒê∆∞·ªùng d·∫´n file Excel output
    SENT_TIME_FILE,  # File l∆∞u th·ªùi gian g·ª≠i email
    EMAIL_UNSEEN_ONLY,  # C·ªù ch·ªâ x·ª≠ l√Ω email ch∆∞a ƒë·ªçc
    get_model_price,  # H√†m l·∫•y gi√° c·ªßa model AI
)
# Import c√°c module x·ª≠ l√Ω ch√≠nh
from modules.email_fetcher import EmailFetcher  # Module l·∫•y email v√† file ƒë√≠nh k√®m
from modules.cv_processor import CVProcessor, format_sent_time_display  # Module x·ª≠ l√Ω CV v√† format th·ªùi gian
from modules.dynamic_llm_client import DynamicLLMClient  # Client k·∫øt n·ªëi v·ªõi c√°c LLM kh√°c nhau
from modules.sent_time_store import load_sent_times  # Module l∆∞u tr·ªØ th·ªùi gian g·ª≠i email
from ..utils import safe_session_state_get  # Utility ƒë·ªÉ l·∫•y session state an to√†n


def render(
    provider: str,  # Nh√† cung c·∫•p AI (OpenAI, Anthropic, etc.)
    model: str,  # T√™n model AI s·ª≠ d·ª•ng
    api_key: str,  # API key ƒë·ªÉ x√°c th·ª±c
    email_user: str = "",  # T√†i kho·∫£n email (m·∫∑c ƒë·ªãnh r·ªóng)
    email_pass: str = "",  # M·∫≠t kh·∫©u email (m·∫∑c ƒë·ªãnh r·ªóng)
) -> None:
    """Render UI for fetching and processing CVs."""  # H√†m hi·ªÉn th·ªã giao di·ªán l·∫•y v√† x·ª≠ l√Ω CV
    st.subheader("L·∫•y & X·ª≠ l√Ω CV")  # Hi·ªÉn th·ªã ti√™u ƒë·ªÅ ph·ª•
    
    # L·∫•y gi√° c·ªßa model v√† t·∫°o label hi·ªÉn th·ªã
    price = get_model_price(model)
    label = f"{model} ({price})" if price != "unknown" else model  # Th√™m gi√° v√†o label n·∫øu c√≥
    st.markdown(f"**LLM:** `{provider}` / `{label}`")  # Hi·ªÉn th·ªã th√¥ng tin LLM ƒëang s·ª≠ d·ª•ng
    
    # Ki·ªÉm tra th√¥ng tin ƒëƒÉng nh·∫≠p email
    if not email_user or not email_pass:
        st.warning("C·∫ßn nh·∫≠p Gmail v√† m·∫≠t kh·∫©u trong sidebar ƒë·ªÉ fetch CV.")  # C·∫£nh b√°o n·∫øu thi·∫øu th√¥ng tin
        fetcher = None  # Kh√¥ng kh·ªüi t·∫°o fetcher
    else:
        # Kh·ªüi t·∫°o email fetcher v·ªõi th√¥ng tin ƒëƒÉng nh·∫≠p
        fetcher = EmailFetcher(EMAIL_HOST, EMAIL_PORT, email_user, email_pass)
        fetcher.connect()  # K·∫øt n·ªëi ƒë·∫øn server email
        
        # Hi·ªÉn th·ªã tr·∫°ng th√°i UID hi·ªán t·∫°i
        if fetcher:
            last_uid = fetcher.get_last_processed_uid()  # L·∫•y UID email cu·ªëi c√πng ƒë√£ x·ª≠ l√Ω
            if last_uid:
                st.info(f"üìß Last processed UID: {last_uid}")  # Hi·ªÉn th·ªã UID cu·ªëi c√πng
            else:
                st.info("üìß No previous UID found - will process all emails")  # Th√¥ng b√°o ch∆∞a c√≥ UID

    # T·∫°o 2 c·ªôt ƒë·ªÉ nh·∫≠p kho·∫£ng th·ªùi gian t√¨m ki·∫øm
    col1, col2 = st.columns(2)
    today_str = date.today().strftime("%d/%m/%Y")  # L·∫•y ng√†y h√¥m nay d·∫°ng string
    
    # C·ªôt 1: Ng√†y b·∫Øt ƒë·∫ßu
    with col1:
        from_date_str = st.text_input("From (DD/MM/YYYY)", value="")  # √î nh·∫≠p ng√†y b·∫Øt ƒë·∫ßu
    
    # C·ªôt 2: Ng√†y k·∫øt th√∫c
    with col2:
        to_date_str = st.text_input("To (DD/MM/YYYY)", value="", placeholder=today_str)  # √î nh·∫≠p ng√†y k·∫øt th√∫c

    # Checkbox ch·ªçn ch·ªâ qu√©t email ch∆∞a ƒë·ªçc
    unseen_only = st.checkbox(
        "üëÅÔ∏è Ch·ªâ qu√©t email ch∆∞a ƒë·ªçc",
        value=safe_session_state_get("unseen_only", EMAIL_UNSEEN_ONLY),  # L·∫•y gi√° tr·ªã t·ª´ session state ho·∫∑c config
        key="unseen_only",
        help="N·∫øu b·ªè ch·ªçn, h·ªá th·ªëng s·∫Ω qu√©t to√†n b·ªô h·ªôp th∆∞",
    )
    
    # Checkbox b·ªè qua UID ƒë√£ l∆∞u
    ignore_last_uid = st.checkbox(
        "üîÑ B·ªè qua UID ƒë√£ l∆∞u (x·ª≠ l√Ω l·∫°i t·∫•t c·∫£ email)",
        value=False,  # M·∫∑c ƒë·ªãnh l√† False
        key="ignore_last_uid",
        help="B·ªè qua UID ƒë√£ l∆∞u v√† x·ª≠ l√Ω l·∫°i t·∫•t c·∫£ email t·ª´ ƒë·∫ßu",
    )
    
    st.divider()  # T·∫°o ƒë∆∞·ªùng ph√¢n c√°ch
    
    # T·∫°o 3 c·ªôt cho c√°c n√∫t b·∫•m
    col_btn1, col_btn2, col_btn3 = st.columns([2, 2, 1])
    
    # C·ªôt 3: N√∫t Reset UID
    with col_btn3:
        if st.button("üóëÔ∏è Reset UID", help="X√≥a UID ƒë√£ l∆∞u ƒë·ªÉ x·ª≠ l√Ω l·∫°i t·ª´ ƒë·∫ßu"):
            if fetcher:  # Ki·ªÉm tra n·∫øu c√≥ k·∫øt n·ªëi email
                fetcher.reset_uid_store()  # Reset UID store
                st.success("‚úÖ ƒê√£ reset UID store!")  # Th√¥ng b√°o th√†nh c√¥ng
                st.rerun()  # Refresh trang
            else:
                st.error("‚ùå C·∫ßn k·∫øt n·ªëi email tr∆∞·ªõc")  # L·ªói n·∫øu ch∆∞a k·∫øt n·ªëi
    
    # C·ªôt 1: N√∫t Fetch
    with col_btn1:
        fetch_button = st.button("üì• Fetch", help="T·∫£i email CV t·ª´ h·ªôp th∆∞")
    
    # C·ªôt 2: N√∫t Process
    with col_btn2:
        process_button = st.button("‚öôÔ∏è Process", help="Ph√¢n t√≠ch CV ƒë√£ t·∫£i v·ªÅ")
    
    st.markdown("---")  # T·∫°o ƒë∆∞·ªùng ph√¢n c√°ch

    # X·ª≠ l√Ω khi nh·∫•n n√∫t Fetch
    if fetch_button:
        if not fetcher:  # Ki·ªÉm tra n·∫øu ch∆∞a c√≥ k·∫øt n·ªëi email
            st.error("‚ùå C·∫ßn k·∫øt n·ªëi email tr∆∞·ªõc khi fetch")
        else:
            logging.info("B·∫Øt ƒë·∫ßu fetch CV t·ª´ email")  # Ghi log b·∫Øt ƒë·∫ßu fetch
            
            # Chuy·ªÉn ƒë·ªïi string ng√†y th√†nh datetime object v·ªõi timezone UTC
            from_dt = (
                datetime.combine(
                    datetime.strptime(from_date_str, "%d/%m/%Y"),  # Parse string th√†nh datetime
                    time.min,  # ƒê·∫∑t th·ªùi gian l√† 00:00:00
                    tzinfo=timezone.utc,  # ƒê·∫∑t timezone UTC
                )
                if from_date_str  # Ch·ªâ th·ª±c hi·ªán n·∫øu c√≥ nh·∫≠p ng√†y b·∫Øt ƒë·∫ßu
                else None
            )
            to_dt = (
                datetime.combine(
                    datetime.strptime(to_date_str, "%d/%m/%Y"),  # Parse string th√†nh datetime
                    time.max,  # ƒê·∫∑t th·ªùi gian l√† 23:59:59
                    tzinfo=timezone.utc,  # ƒê·∫∑t timezone UTC
                )
                if to_date_str  # Ch·ªâ th·ª±c hi·ªán n·∫øu c√≥ nh·∫≠p ng√†y k·∫øt th√∫c
                else None
            )
            # Chuy·ªÉn datetime th√†nh date object ƒë·ªÉ truy·ªÅn v√†o h√†m fetch
            since = from_dt.date() if from_dt else None
            before = to_dt.date() if to_dt else None
            
            status_placeholder = st.empty()  # T·∫°o placeholder ƒë·ªÉ hi·ªÉn th·ªã tr·∫°ng th√°i
            with st.spinner("üì• ƒêang t·∫£i email..."):  # Hi·ªÉn th·ªã spinner loading
                try:
                    status_placeholder.info("üîç ƒêang t√¨m ki·∫øm email...")  # C·∫≠p nh·∫≠t tr·∫°ng th√°i
                    # G·ªçi h√†m fetch CV attachments t·ª´ email
                    new_files = fetcher.fetch_cv_attachments(
                        since=since,  # Ng√†y b·∫Øt ƒë·∫ßu
                        before=before,  # Ng√†y k·∫øt th√∫c
                        unseen_only=unseen_only,  # Ch·ªâ email ch∆∞a ƒë·ªçc
                        ignore_last_uid=ignore_last_uid,  # B·ªè qua UID ƒë√£ l∆∞u
                    )
                    status_placeholder.empty()  # X√≥a placeholder tr·∫°ng th√°i
                    
                    # Ki·ªÉm tra k·∫øt qu·∫£ fetch
                    if new_files:
                        st.success(f"‚úÖ ƒê√£ t·∫£i xu·ªëng {len(new_files)} file CV m·ªõi:")  # Th√¥ng b√°o th√†nh c√¥ng
                        # Hi·ªÉn th·ªã danh s√°ch file ƒë√£ t·∫£i
                        for file_path in new_files:
                            st.write(f"- {Path(file_path).name}")
                        
                        # Hi·ªÉn th·ªã UID m·ªõi sau khi fetch
                        new_uid = fetcher.get_last_processed_uid()
                        if new_uid:
                            st.info(f"üìß Updated last processed UID: {new_uid}")
                    else:
                        st.info("üìß Kh√¥ng t√¨m th·∫•y CV m·ªõi ƒë·ªÉ t·∫£i v·ªÅ")  # Th√¥ng b√°o kh√¥ng c√≥ file m·ªõi
                        
                except Exception as e:  # X·ª≠ l√Ω ngo·∫°i l·ªá
                    status_placeholder.empty()  # X√≥a placeholder
                    st.error(f"‚ùå L·ªói khi fetch email: {e}")  # Hi·ªÉn th·ªã l·ªói
                    logging.error(f"Fetch error: {e}")  # Ghi log l·ªói

    # X·ª≠ l√Ω khi nh·∫•n n√∫t Process
    if process_button:
        logging.info("B·∫Øt ƒë·∫ßu process CV ƒë√£ t·∫£i v·ªÅ")  # Ghi log b·∫Øt ƒë·∫ßu x·ª≠ l√Ω
        
        # Chuy·ªÉn ƒë·ªïi string ng√†y th√†nh datetime object (t∆∞∆°ng t·ª± ph·∫ßn fetch)
        from_dt = (
            datetime.combine(
                datetime.strptime(from_date_str, "%d/%m/%Y"),
                time.min,
                tzinfo=timezone.utc,
            )
            if from_date_str
            else None
        )
        to_dt = (
            datetime.combine(
                datetime.strptime(to_date_str, "%d/%m/%Y"),
                time.max,
                tzinfo=timezone.utc,
            )
            if to_date_str
            else None
        )
        
        # T·∫°o container cho thanh ti·∫øn tr√¨nh
        progress_container = st.container()
        with progress_container:
            # Kh·ªüi t·∫°o thanh ti·∫øn tr√¨nh
            progress_bar = StreamlitProgressBar(progress_container)
            progress_bar.initialize(100, "‚öôÔ∏è ƒêang kh·ªüi t·∫°o x·ª≠ l√Ω CV...")

            # Kh·ªüi t·∫°o CV processor
            processor = CVProcessor(
                fetcher=None,  # Kh√¥ng fetch, ch·ªâ x·ª≠ l√Ω file c√≥ s·∫µn
                llm_client=DynamicLLMClient(provider=provider, model=model, api_key=api_key),  # Client LLM
            )

            # ƒê·ªãnh nghƒ©a callback function ƒë·ªÉ c·∫≠p nh·∫≠t ti·∫øn tr√¨nh
            def progress_callback(current, message):
                progress_bar.update(current, message)

            # G·ªçi h√†m x·ª≠ l√Ω CV
            df = processor.process(
                unseen_only=False,  # X·ª≠ l√Ω t·∫•t c·∫£ file trong th∆∞ m·ª•c
                since=None,  # Kh√¥ng l·ªçc theo ng√†y email khi x·ª≠ l√Ω file c√≥ s·∫µn
                before=None,
                from_time=from_dt,  # Th·ªùi gian b·∫Øt ƒë·∫ßu ƒë·ªÉ l·ªçc
                to_time=to_dt,  # Th·ªùi gian k·∫øt th√∫c ƒë·ªÉ l·ªçc
                progress_callback=progress_callback,  # Callback c·∫≠p nh·∫≠t ti·∫øn tr√¨nh
                ignore_last_uid=False,  # Kh√¥ng li√™n quan khi fetcher l√† None
            )

            progress_bar.finish("‚úÖ X·ª≠ l√Ω CV ho√†n t·∫•t!")  # Ho√†n th√†nh thanh ti·∫øn tr√¨nh

        # Ki·ªÉm tra k·∫øt qu·∫£ x·ª≠ l√Ω
        if df.empty:
            st.info("üìÅ Kh√¥ng c√≥ CV n√†o trong th∆∞ m·ª•c attachments ƒë·ªÉ x·ª≠ l√Ω.")  # Th√¥ng b√°o kh√¥ng c√≥ CV
        else:
            # L∆∞u k·∫øt qu·∫£ v√†o file CSV v√† Excel
            processor.save_to_csv(df, str(OUTPUT_CSV))
            processor.save_to_excel(df, str(OUTPUT_EXCEL))
            logging.info("ƒê√£ x·ª≠ l√Ω %s CV v√† l∆∞u k·∫øt qu·∫£", len(df))  # Ghi log k·∫øt qu·∫£
            st.success(
                f"‚úÖ ƒê√£ x·ª≠ l√Ω {len(df)} CV v√† l∆∞u v√†o `{OUTPUT_CSV.name}` v√† `{OUTPUT_EXCEL.name}`."
            )

    # L·∫•y danh s√°ch file attachments
    attachments = [
        p  # ƒê∆∞·ªùng d·∫´n file
        for p in ATTACHMENT_DIR.glob("*")  # Qu√©t t·∫•t c·∫£ file trong th∆∞ m·ª•c attachments
        if p.is_file()  # Ch·ªâ l·∫•y file (kh√¥ng ph·∫£i th∆∞ m·ª•c)
        and p != SENT_TIME_FILE  # Lo·∫°i tr·ª´ file l∆∞u th·ªùi gian g·ª≠i
        and p.suffix.lower() in (".pdf", ".docx")  # Ch·ªâ l·∫•y file PDF v√† DOCX
    ]
    
    # N·∫øu c√≥ file attachments
    if attachments:
        sent_map = load_sent_times()  # Load map th·ªùi gian g·ª≠i t·ª´ file

        # H√†m t·∫°o key ƒë·ªÉ s·∫Øp x·∫øp file theo th·ªùi gian
        def sort_key(p: Path) -> float:
            ts = sent_map.get(p.name)  # L·∫•y timestamp t·ª´ map
            if ts:
                try:
                    # Chuy·ªÉn ƒë·ªïi ISO string th√†nh timestamp
                    return datetime.fromisoformat(ts.replace("Z", "+00:00")).timestamp()
                except Exception:
                    pass
            # N·∫øu kh√¥ng c√≥ th·ªùi gian g·ª≠i, d√πng th·ªùi gian modify file
            return p.stat().st_mtime

        # S·∫Øp x·∫øp file theo th·ªùi gian gi·∫£m d·∫ßn (m·ªõi nh·∫•t tr∆∞·ªõc)
        attachments.sort(key=sort_key, reverse=True)

        # H√†m t·∫°o link download cho file
        def make_link(path: Path) -> str:
            data = base64.b64encode(path.read_bytes()).decode()  # M√£ h√≥a file th√†nh base64
            # X√°c ƒë·ªãnh MIME type theo extension
            mime = (
                "application/pdf"
                if path.suffix.lower() == ".pdf"
                else "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
            )
            # T·∫°o link download HTML
            return f'<a download="{path.name}" href="data:{mime};base64,{data}">{path.name}</a>'

        # T·∫°o danh s√°ch d·ªØ li·ªáu cho b·∫£ng
        rows = []
        for p in attachments:
            sent = format_sent_time_display(sent_map.get(p.name, ""))  # Format th·ªùi gian g·ª≠i
            size_kb = p.stat().st_size / 1024  # T√≠nh k√≠ch th∆∞·ªõc file (KB)
            rows.append({
                "File": make_link(p),  # Link download
                "Dung l∆∞·ª£ng": f"{size_kb:.1f} KB",  # K√≠ch th∆∞·ªõc file
                "G·ª≠i l√∫c": sent,  # Th·ªùi gian g·ª≠i
            })

        # T·∫°o DataFrame v√† chuy·ªÉn th√†nh HTML table
        df = pd.DataFrame(rows, columns=["File", "Dung l∆∞·ª£ng", "G·ª≠i l√∫c"])
        table_html = df.to_html(escape=False, index=False)  # Kh√¥ng escape HTML ƒë·ªÉ link ho·∫°t ƒë·ªông
        # T·∫°o container c√≥ scroll cho b·∫£ng
        styled_html = (
            "<div class='attachments-table-container' style='max-height: 400px; overflow:auto;'>"
            f"{table_html}"
            "</div>"
        )
        st.markdown(styled_html, unsafe_allow_html=True)  # Hi·ªÉn th·ªã b·∫£ng
    else:
        st.info("Ch∆∞a c√≥ CV n√†o ƒë∆∞·ª£c t·∫£i v·ªÅ.")  # Th√¥ng b√°o n·∫øu ch∆∞a c√≥ file

    # N√∫t x√≥a to√†n b·ªô attachments
    if st.button("X√≥a to√†n b·ªô attachments", help="Xo√° t·∫•t c·∫£ file ƒë√£ t·∫£i"):
        st.session_state.confirm_delete = True  # ƒê·∫∑t flag confirm delete
    
    # X·ª≠ l√Ω x√°c nh·∫≠n x√≥a file
    if st.session_state.get("confirm_delete"):
        st.warning("B·∫°n c√≥ ch·∫Øc mu·ªën xo√° to√†n b·ªô attachments? Thao t√°c kh√¥ng th·ªÉ ho√†n t√°c.")  # C·∫£nh b√°o
        col1, col2 = st.columns(2)  # T·∫°o 2 c·ªôt cho n√∫t x√°c nh·∫≠n v√† h·ªßy
        
        # C·ªôt 1: N√∫t x√°c nh·∫≠n x√≥a
        with col1:
            if st.button("X√°c nh·∫≠n xo√°", key="confirm_delete_btn"):
                attachments = list(ATTACHMENT_DIR.iterdir())  # L·∫•y danh s√°ch t·∫•t c·∫£ file trong th∆∞ m·ª•c
                count = sum(1 for f in attachments if f.is_file())  # ƒê·∫øm s·ªë file
                # X√≥a t·ª´ng file
                for f in attachments:
                    try:
                        f.unlink()  # X√≥a file
                    except Exception:
                        pass  # B·ªè qua n·∫øu c√≥ l·ªói
                logging.info(f"ƒê√£ x√≥a {count} file trong attachments")  # Ghi log
                st.success(f"ƒê√£ x√≥a {count} file trong th∆∞ m·ª•c attachments.")  # Th√¥ng b√°o th√†nh c√¥ng
                st.session_state.confirm_delete = False  # Reset flag
        
        # C·ªôt 2: N√∫t h·ªßy
        with col2:
            if st.button("Hu·ª∑", key="cancel_delete_btn"):
                st.session_state.confirm_delete = False  # Reset flag ƒë·ªÉ h·ªßy thao t√°c
