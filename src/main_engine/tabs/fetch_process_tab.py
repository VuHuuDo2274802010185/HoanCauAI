"""Tab k·∫øt h·ª£p l·∫•y v√† x·ª≠ l√Ω CV t·ª´ email."""

import logging
from typing import List
from pathlib import Path
from datetime import datetime, time, timezone, date
import base64

from modules.progress_manager import StreamlitProgressBar

import pandas as pd
import streamlit as st

from modules.config import (
    ATTACHMENT_DIR,
    EMAIL_HOST,
    EMAIL_PORT,
    OUTPUT_CSV,
    OUTPUT_EXCEL,
    SENT_TIME_FILE,
    EMAIL_UNSEEN_ONLY,
    get_model_price,
)
from modules.email_fetcher import EmailFetcher
from modules.cv_processor import CVProcessor, format_sent_time_display
from modules.dynamic_llm_client import DynamicLLMClient
from modules.sent_time_store import load_sent_times
from ..utils import safe_session_state_get


def render(
    provider: str,
    model: str,
    api_key: str,
    email_user: str = "",
    email_pass: str = "",
) -> None:
    """Render UI for fetching and processing CVs."""
    st.subheader("L·∫•y & X·ª≠ l√Ω CV")
    price = get_model_price(model)
    label = f"{model} ({price})" if price != "unknown" else model
    st.markdown(f"**LLM:** `{provider}` / `{label}`")
    if not email_user or not email_pass:
        st.warning("C·∫ßn nh·∫≠p Gmail v√† m·∫≠t kh·∫©u trong sidebar ƒë·ªÉ fetch CV.")
        fetcher = None
    else:
        fetcher = EmailFetcher(EMAIL_HOST, EMAIL_PORT, email_user, email_pass)
        fetcher.connect()
        
        # Show current UID status
        if fetcher:
            last_uid = fetcher.get_last_processed_uid()
            if last_uid:
                st.info(f"üìß Last processed UID: {last_uid}")
            else:
                st.info("üìß No previous UID found - will process all emails")

    col1, col2 = st.columns(2)
    today_str = date.today().strftime("%d/%m/%Y")
    with col1:
        from_date_str = st.text_input("From (DD/MM/YYYY)", value="")
    with col2:
        to_date_str = st.text_input("To (DD/MM/YYYY)", value="", placeholder=today_str)

    unseen_only = st.checkbox(
        "üëÅÔ∏è Ch·ªâ qu√©t email ch∆∞a ƒë·ªçc",
        value=safe_session_state_get("unseen_only", EMAIL_UNSEEN_ONLY),
        key="unseen_only",
        help="N·∫øu b·ªè ch·ªçn, h·ªá th·ªëng s·∫Ω qu√©t to√†n b·ªô h·ªôp th∆∞",
    )
    
    ignore_last_uid = st.checkbox(
        "üîÑ B·ªè qua UID ƒë√£ l∆∞u (x·ª≠ l√Ω l·∫°i t·∫•t c·∫£ email)",
        value=False,
        key="ignore_last_uid",
        help="B·ªè qua UID ƒë√£ l∆∞u v√† x·ª≠ l√Ω l·∫°i t·∫•t c·∫£ email t·ª´ ƒë·∫ßu",
    )
    
    st.divider()
    
    col_btn1, col_btn2, col_btn3 = st.columns([2, 2, 1])
    
    with col_btn3:
        if st.button("üóëÔ∏è Reset UID", help="X√≥a UID ƒë√£ l∆∞u ƒë·ªÉ x·ª≠ l√Ω l·∫°i t·ª´ ƒë·∫ßu"):
            if fetcher:
                fetcher.reset_uid_store()
                st.success("‚úÖ ƒê√£ reset UID store!")
                st.rerun()
            else:
                st.error("‚ùå C·∫ßn k·∫øt n·ªëi email tr∆∞·ªõc")
    
    with col_btn1:
        fetch_button = st.button("üì• Fetch", help="T·∫£i email CV t·ª´ h·ªôp th∆∞")
    
    with col_btn2:
        process_button = st.button("‚öôÔ∏è Process", help="Ph√¢n t√≠ch CV ƒë√£ t·∫£i v·ªÅ")
    
    st.markdown("---")

    # Handle Fetch button
    if fetch_button:
        if not fetcher:
            st.error("‚ùå C·∫ßn k·∫øt n·ªëi email tr∆∞·ªõc khi fetch")
        else:
            logging.info("B·∫Øt ƒë·∫ßu fetch CV t·ª´ email")
            from_dt = (
                datetime.combine(
                    datetime.strptime(from_date_str, "%d/%m/%Y"),
                    time.min,
                    tzinfo=timezone.utc,
                )
                if from_date_str
                else None
            )
            to_dt = (
                datetime.combine(
                    datetime.strptime(to_date_str, "%d/%m/%Y"),
                    time.max,
                    tzinfo=timezone.utc,
                )
                if to_date_str
                else None
            )
            since = from_dt.date() if from_dt else None
            before = to_dt.date() if to_dt else None
            
            status_placeholder = st.empty()
            with st.spinner("üì• ƒêang t·∫£i email..."):
                try:
                    status_placeholder.info("üîç ƒêang t√¨m ki·∫øm email...")
                    new_files = fetcher.fetch_cv_attachments(
                        since=since,
                        before=before,
                        unseen_only=unseen_only,
                        ignore_last_uid=ignore_last_uid,
                    )
                    status_placeholder.empty()
                    
                    if new_files:
                        st.success(f"‚úÖ ƒê√£ t·∫£i xu·ªëng {len(new_files)} file CV m·ªõi:")
                        for file_path in new_files:
                            st.write(f"- {Path(file_path).name}")
                        
                        # Show updated UID status after fetch
                        new_uid = fetcher.get_last_processed_uid()
                        if new_uid:
                            st.info(f"üìß Updated last processed UID: {new_uid}")
                    else:
                        st.info("üìß Kh√¥ng t√¨m th·∫•y CV m·ªõi ƒë·ªÉ t·∫£i v·ªÅ")
                        
                except Exception as e:
                    status_placeholder.empty()
                    st.error(f"‚ùå L·ªói khi fetch email: {e}")
                    logging.error(f"Fetch error: {e}")

    # Handle Process button  
    if process_button:
        logging.info("B·∫Øt ƒë·∫ßu process CV ƒë√£ t·∫£i v·ªÅ")
        from_dt = (
            datetime.combine(
                datetime.strptime(from_date_str, "%d/%m/%Y"),
                time.min,
                tzinfo=timezone.utc,
            )
            if from_date_str
            else None
        )
        to_dt = (
            datetime.combine(
                datetime.strptime(to_date_str, "%d/%m/%Y"),
                time.max,
                tzinfo=timezone.utc,
            )
            if to_date_str
            else None
        )
        
        progress_container = st.container()
        with progress_container:
            progress_bar = StreamlitProgressBar(progress_container)
            progress_bar.initialize(100, "‚öôÔ∏è ƒêang kh·ªüi t·∫°o x·ª≠ l√Ω CV...")

            processor = CVProcessor(
                fetcher=None,  # Don't fetch, only process existing files
                llm_client=DynamicLLMClient(provider=provider, model=model, api_key=api_key),
            )

            def progress_callback(current, message):
                progress_bar.update(current, message)

            df = processor.process(
                unseen_only=False,  # Process all files in directory
                since=None,  # Don't filter by email dates when processing existing files
                before=None,
                from_time=from_dt,
                to_time=to_dt,
                progress_callback=progress_callback,
                ignore_last_uid=False,  # Not relevant when fetcher is None
            )

            progress_bar.finish("‚úÖ X·ª≠ l√Ω CV ho√†n t·∫•t!")

        if df.empty:
            st.info("üìÅ Kh√¥ng c√≥ CV n√†o trong th∆∞ m·ª•c attachments ƒë·ªÉ x·ª≠ l√Ω.")
        else:
            processor.save_to_csv(df, str(OUTPUT_CSV))
            processor.save_to_excel(df, str(OUTPUT_EXCEL))
            logging.info("ƒê√£ x·ª≠ l√Ω %s CV v√† l∆∞u k·∫øt qu·∫£", len(df))
            st.success(
                f"‚úÖ ƒê√£ x·ª≠ l√Ω {len(df)} CV v√† l∆∞u v√†o `{OUTPUT_CSV.name}` v√† `{OUTPUT_EXCEL.name}`."
            )

    attachments = [
        p
        for p in ATTACHMENT_DIR.glob("*")
        if p.is_file()
        and p != SENT_TIME_FILE
        and p.suffix.lower() in (".pdf", ".docx")
    ]
    if attachments:
        sent_map = load_sent_times()

        def sort_key(p: Path) -> float:
            ts = sent_map.get(p.name)
            if ts:
                try:
                    return datetime.fromisoformat(ts.replace("Z", "+00:00")).timestamp()
                except Exception:
                    pass
            return p.stat().st_mtime

        attachments.sort(key=sort_key, reverse=True)

        def make_link(path: Path) -> str:
            data = base64.b64encode(path.read_bytes()).decode()
            mime = (
                "application/pdf"
                if path.suffix.lower() == ".pdf"
                else "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
            )
            return f'<a download="{path.name}" href="data:{mime};base64,{data}">{path.name}</a>'

        rows = []
        for p in attachments:
            sent = format_sent_time_display(sent_map.get(p.name, ""))
            size_kb = p.stat().st_size / 1024
            rows.append({
                "File": make_link(p),
                "Dung l∆∞·ª£ng": f"{size_kb:.1f} KB",
                "G·ª≠i l√∫c": sent,
            })

        df = pd.DataFrame(rows, columns=["File", "Dung l∆∞·ª£ng", "G·ª≠i l√∫c"])
        table_html = df.to_html(escape=False, index=False)
        styled_html = (
            "<div class='attachments-table-container' style='max-height: 400px; overflow:auto;'>"
            f"{table_html}"
            "</div>"
        )
        st.markdown(styled_html, unsafe_allow_html=True)
    else:
        st.info("Ch∆∞a c√≥ CV n√†o ƒë∆∞·ª£c t·∫£i v·ªÅ.")

    if st.button("X√≥a to√†n b·ªô attachments", help="Xo√° t·∫•t c·∫£ file ƒë√£ t·∫£i"):
        st.session_state.confirm_delete = True
    if st.session_state.get("confirm_delete"):
        st.warning("B·∫°n c√≥ ch·∫Øc mu·ªën xo√° to√†n b·ªô attachments? Thao t√°c kh√¥ng th·ªÉ ho√†n t√°c.")
        col1, col2 = st.columns(2)
        with col1:
            if st.button("X√°c nh·∫≠n xo√°", key="confirm_delete_btn"):
                attachments = list(ATTACHMENT_DIR.iterdir())
                count = sum(1 for f in attachments if f.is_file())
                for f in attachments:
                    try:
                        f.unlink()
                    except Exception:
                        pass
                logging.info(f"ƒê√£ x√≥a {count} file trong attachments")
                st.success(f"ƒê√£ x√≥a {count} file trong th∆∞ m·ª•c attachments.")
                st.session_state.confirm_delete = False
        with col2:
            if st.button("Hu·ª∑", key="cancel_delete_btn"):
                st.session_state.confirm_delete = False
