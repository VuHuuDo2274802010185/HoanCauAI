# app.py
import streamlit as st
import pandas as pd
import os
import shutil
import logging

from modules.cv_processor import CVProcessor
from modules.email_fetcher import EmailFetcher
from modules.config import (
    EMAIL_HOST, EMAIL_PORT, EMAIL_USER, EMAIL_PASS, 
    OUTPUT_CSV, ATTACHMENT_DIR
)

# C·∫•u h√¨nh logging ƒë·ªÉ th·∫•y output tr√™n console khi ch·∫°y
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")

# --- C·∫•u h√¨nh giao di·ªán ---
st.set_page_config(
    page_title="C√¥ng c·ª• Test - Tr√≠ch xu·∫•t CV AI",
    page_icon="üß™",
    layout="wide"
)

st.title("üß™ C√¥ng c·ª• Test cho Tr√¨nh tr√≠ch xu·∫•t CV AI")
st.markdown("S·ª≠ d·ª•ng giao di·ªán n√†y ƒë·ªÉ ki·ªÉm tra c√°c ch·ª©c nƒÉng c·ªët l√µi tr∆∞·ªõc khi tri·ªÉn khai MCP Server.")

# --- T·∫°o c√°c tab ch·ª©c nƒÉng ---
tab1, tab2, tab3 = st.tabs(["X·ª≠ l√Ω h√†ng lo·∫°t (Email)", "X·ª≠ l√Ω file ƒë∆°n l·∫ª", "Xem k·∫øt qu·∫£"])

# --- TAB 1: X·ª¨ L√ù H√ÄNG LO·∫†T T·ª™ EMAIL ---
with tab1:
    st.header("K√≠ch ho·∫°t quy tr√¨nh qu√©t Email v√† x·ª≠ l√Ω h√†ng lo·∫°t")
    st.write("Nh·∫•n n√∫t b√™n d∆∞·ªõi ƒë·ªÉ b·∫Øt ƒë·∫ßu qu√° tr√¨nh k·∫øt n·ªëi t·ªõi email, t·∫£i c√°c file CV m·ªõi, d√πng AI tr√≠ch xu·∫•t th√¥ng tin v√† l∆∞u v√†o file `cv_summary.csv`.")
    
    if not all([EMAIL_USER, EMAIL_PASS]):
        st.error("Ch∆∞a c·∫•u h√¨nh `EMAIL_USER` v√† `EMAIL_PASS` trong file `.env`. Vui l√≤ng c·∫•u h√¨nh ƒë·ªÉ s·ª≠ d·ª•ng ch·ª©c nƒÉng n√†y.")
    else:
        if st.button("üöÄ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω h√†ng lo·∫°t"):
            try:
                with st.spinner("B∆∞·ªõc 1/3: ƒêang k·∫øt n·ªëi ƒë·∫øn email v√† t√¨m ki·∫øm CV..."):
                    fetcher = EmailFetcher(host=EMAIL_HOST, port=EMAIL_PORT, user=EMAIL_USER, password=EMAIL_PASS)
                    fetcher.connect()
                    st.info("K·∫øt n·ªëi email th√†nh c√¥ng.")

                with st.spinner("B∆∞·ªõc 2/3: ƒêang x·ª≠ l√Ω c√°c CV t√¨m th·∫•y b·∫±ng AI..."):
                    processor = CVProcessor(fetcher)
                    df = processor.process()
                
                with st.spinner("B∆∞·ªõc 3/3: ƒêang l∆∞u k·∫øt qu·∫£..."):
                    if not df.empty:
                        processor.save_to_csv(df, OUTPUT_CSV)
                        st.success(f"Ho√†n t·∫•t! ƒê√£ x·ª≠ l√Ω v√† l∆∞u {len(df)} h·ªì s∆° v√†o `{OUTPUT_CSV}`.")
                        st.dataframe(df)
                    else:
                        st.warning("Kh√¥ng t√¨m th·∫•y CV m·ªõi ho·∫∑c kh√¥ng c√≥ CV n√†o ƒë·ªÉ x·ª≠ l√Ω.")

            except Exception as e:
                st.error(f"ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh x·ª≠ l√Ω: {e}")
                logging.error("L·ªói chi ti·∫øt:", exc_info=True)


# --- TAB 2: X·ª¨ L√ù FILE ƒê∆†N L·∫∫ ---
with tab2:
    st.header("Ki·ªÉm tra tr√≠ch xu·∫•t tr√™n m·ªôt file CV duy nh·∫•t")
    st.write("T·∫£i l√™n m·ªôt file `.pdf` ho·∫∑c `.docx` ƒë·ªÉ xem k·∫øt qu·∫£ tr√≠ch xu·∫•t c·ªßa AI ngay l·∫≠p t·ª©c.")
    
    uploaded_file = st.file_uploader("Ch·ªçn file CV...", type=["pdf", "docx"])

    if uploaded_file is not None:
        if st.button("‚ú® Tr√≠ch xu·∫•t th√¥ng tin t·ª´ file n√†y"):
            # L∆∞u file t·∫£i l√™n v√†o m·ªôt v·ªã tr√≠ t·∫°m th·ªùi
            temp_path = os.path.join(ATTACHMENT_DIR, f"temp_{uploaded_file.name}")
            with open(temp_path, "wb") as f:
                f.write(uploaded_file.getbuffer())

            try:
                with st.spinner("ƒêang ƒë·ªçc file v√† g·ªçi AI..."):
                    processor = CVProcessor() # Kh·ªüi t·∫°o kh√¥ng c·∫ßn fetcher
                    text = processor.extract_text(temp_path)
                    
                    if not text or not text.strip():
                        st.error("Kh√¥ng th·ªÉ ƒë·ªçc ƒë∆∞·ª£c n·ªôi dung vƒÉn b·∫£n t·ª´ file n√†y.")
                    else:
                        info = processor.extract_info_with_llm(text)
                        st.success("Tr√≠ch xu·∫•t th√†nh c√¥ng!")
                        st.json(info)
            except Exception as e:
                st.error(f"ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω file: {e}")
                logging.error("L·ªói chi ti·∫øt:", exc_info=True)
            finally:
                # D·ªçn d·∫πp file t·∫°m sau khi x·ª≠ l√Ω xong
                if os.path.exists(temp_path):
                    os.remove(temp_path)

# --- TAB 3: XEM K·∫æT QU·∫¢ ---
with tab3:
    st.header(f"Xem v√† t·∫£i file k·∫øt qu·∫£: `{OUTPUT_CSV}`")
    
    if os.path.exists(OUTPUT_CSV):
        try:
            df_results = pd.read_csv(OUTPUT_CSV)
            st.dataframe(df_results)
            
            # Cung c·∫•p n√∫t t·∫£i v·ªÅ
            with open(OUTPUT_CSV, "rb") as f:
                st.download_button(
                    label="üì• T·∫£i v·ªÅ file CSV",
                    data=f,
                    file_name=OUTPUT_CSV,
                    mime='text/csv',
                )
        except Exception as e:
            st.error(f"Kh√¥ng th·ªÉ ƒë·ªçc file {OUTPUT_CSV}: {e}")
    else:
        st.warning(f"File k·∫øt qu·∫£ `{OUTPUT_CSV}` ch∆∞a t·ªìn t·∫°i. H√£y ch·∫°y quy tr√¨nh x·ª≠ l√Ω ·ªü tab ƒë·∫ßu ti√™n.")