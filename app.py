# app.py
import streamlit as st
import pandas as pd
import os
import logging
from typing import Any

from modules.cv_processor import CVProcessor
from modules.email_fetcher import EmailFetcher
from modules.dynamic_llm_client import DynamicLLMClient
from modules.config import (
    EMAIL_HOST, EMAIL_PORT, EMAIL_USER, EMAIL_PASS, 
    OUTPUT_CSV, ATTACHMENT_DIR, LLM_CONFIG
)
from modules.model_fetcher import ModelFetcher

# C·∫•u h√¨nh logging ƒë·ªÉ th·∫•y output tr√™n console khi ch·∫°y
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")

# Load CSS styling
def load_css():
    """Load custom CSS cho theme v√†ng kim"""
    try:
        with open('static/style.css') as f:
            st.markdown(f'<style>{f.read()}</style>', unsafe_allow_html=True)
    except FileNotFoundError:
        st.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file CSS theme")

# H√†m helper ƒë·ªÉ x·ª≠ l√Ω d·ªØ li·ªáu tr∆∞·ªõc khi hi·ªÉn th·ªã
def prepare_dataframe_for_display(df: pd.DataFrame) -> pd.DataFrame:
    """Chuy·ªÉn ƒë·ªïi c√°c list th√†nh string ƒë·ªÉ tr√°nh l·ªói pyarrow"""
    df_display = df.copy()
    for col in df_display.columns:
        df_display[col] = df_display[col].apply(
            lambda x: ', '.join(map(str, x)) if isinstance(x, list) else str(x) if x is not None else ""
        )
    return df_display

# H√†m ƒë·ªÉ l·∫•y danh s√°ch models
@st.cache_data(ttl=300)  # Cache 5 ph√∫t
def get_available_models(provider: str, api_key: str):
    """L·∫•y danh s√°ch models v·ªõi cache"""
    try:
        if provider == "google" and api_key:
            return ModelFetcher.get_google_models(api_key)
        elif provider == "openrouter" and api_key:
            return ModelFetcher.get_simple_openrouter_model_ids(api_key)
        else:
            return []
    except Exception as e:
        st.error(f"L·ªói khi l·∫•y models: {e}")
        return []

# --- C·∫•u h√¨nh giao di·ªán ---
st.set_page_config(
    page_title="üî• CV AI Processor - Gold Edition",
    page_icon="üëë",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Load CSS theme
load_css()

# Header v·ªõi styling ƒë·∫∑c bi·ªát
st.markdown("""
<div style='text-align: center; padding: 20px; background: linear-gradient(135deg, #FFD700, #FFA500); border-radius: 15px; margin-bottom: 30px;'>
    <h1 style='color: white; margin: 0; text-shadow: 2px 2px 4px rgba(0,0,0,0.3);'>
        üëë CV AI Processor - Gold Edition üëë
    </h1>
    <p style='color: white; font-size: 18px; margin: 10px 0 0 0; opacity: 0.9;'>
        Tr√≠ch xu·∫•t th√¥ng tin CV th√¥ng minh v·ªõi AI
    </p>
</div>
""", unsafe_allow_html=True)

# --- SIDEBAR: C·∫§U H√åNH MODEL ---
with st.sidebar:
    st.markdown("## ‚öôÔ∏è C·∫•u h√¨nh LLM")
    
    # Hi·ªÉn th·ªã th√¥ng tin hi·ªán t·∫°i
    current_provider = LLM_CONFIG['provider']
    current_model = LLM_CONFIG['model']
    
    st.info(f"ÔøΩ Provider hi·ªán t·∫°i: **{current_provider.upper()}**")
    st.info(f"üéØ Model hi·ªán t·∫°i: **{current_model}**")
    
    # Ch·ªçn provider
    providers = ["google", "openrouter"]
    selected_provider = st.selectbox(
        "üè¢ Ch·ªçn LLM Provider:",
        providers,
        index=providers.index(current_provider) if current_provider in providers else 0
    )
    
    # L·∫•y API key cho provider ƒë∆∞·ª£c ch·ªçn
    if selected_provider == "google":
        api_key = os.getenv("GOOGLE_API_KEY", "")
        if not api_key:
            st.error("‚ùå Thi·∫øu GOOGLE_API_KEY trong .env")
            available_models = []
        else:
            st.success("‚úÖ Google API Key c√≥ s·∫µn")
            available_models = get_available_models("google", api_key)
    else:  # openrouter
        api_key = os.getenv("OPENROUTER_API_KEY", "")
        if not api_key:
            st.error("‚ùå Thi·∫øu OPENROUTER_API_KEY trong .env")
            available_models = []
        else:
            st.success("‚úÖ OpenRouter API Key c√≥ s·∫µn")
            available_models = get_available_models("openrouter", api_key)
    
    # Ch·ªçn model
    if available_models:
        st.markdown("### üéØ Ch·ªçn Model:")
        selected_model = st.selectbox(
            f"Models kh·∫£ d·ª•ng ({len(available_models)}):",
            available_models,
            index=available_models.index(current_model) if current_model in available_models else 0
        )
          # N√∫t apply changes
        if st.button("üîÑ √Åp d·ª•ng thay ƒë·ªïi", type="primary"):
            # L∆∞u v√†o session state ƒë·ªÉ s·ª≠ d·ª•ng trong app
            st.session_state.selected_provider = selected_provider
            st.session_state.selected_model = selected_model
            st.success("‚úÖ ƒê√£ c·∫≠p nh·∫≠t c·∫•u h√¨nh!")
            st.rerun()
    else:
        st.warning("‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y danh s√°ch models")
        st.session_state.selected_provider = current_provider
        st.session_state.selected_model = current_model
    
    # Th√¥ng tin th·ªëng k√™
    st.markdown("---")
    st.markdown("### üìä Th·ªëng k√™")
    if available_models:
        st.metric("Models kh·∫£ d·ª•ng", len(available_models))
    
    # Links h·ªØu √≠ch
    st.markdown("### üîó Links h·ªØu √≠ch")
    st.markdown("- [Google AI Studio](https://aistudio.google.com/app/apikey)")
    st.markdown("- [OpenRouter Keys](https://openrouter.ai/keys)")
    st.markdown("- [GitHub Repo](https://github.com)")

# L·∫•y c·∫•u h√¨nh t·ª´ session state ho·∫∑c m·∫∑c ƒë·ªãnh
current_provider = st.session_state.get('selected_provider', LLM_CONFIG['provider'])
current_model = st.session_state.get('selected_model', LLM_CONFIG['model'])

# Hi·ªÉn th·ªã th√¥ng tin c·∫•u h√¨nh hi·ªán t·∫°i tr√™n main area
st.info(f"üîß **C·∫•u h√¨nh hi·ªán t·∫°i**: {current_provider.upper()} - {current_model}")

# --- T·∫°o c√°c tab ch·ª©c nƒÉng ---
tab1, tab2, tab3 = st.tabs(["X·ª≠ l√Ω h√†ng lo·∫°t (Email)", "X·ª≠ l√Ω file ƒë∆°n l·∫ª", "Xem k·∫øt qu·∫£"])

# --- TAB 1: X·ª¨ L√ù H√ÄNG LO·∫†T T·ª™ EMAIL ---
with tab1:
    st.header("K√≠ch ho·∫°t quy tr√¨nh qu√©t Email v√† x·ª≠ l√Ω h√†ng lo·∫°t")
    st.write("Nh·∫•n n√∫t b√™n d∆∞·ªõi ƒë·ªÉ b·∫Øt ƒë·∫ßu qu√° tr√¨nh k·∫øt n·ªëi t·ªõi email, t·∫£i c√°c file CV m·ªõi, d√πng AI tr√≠ch xu·∫•t th√¥ng tin v√† l∆∞u v√†o file `cv_summary.csv`.")
    
    if not all([EMAIL_USER, EMAIL_PASS]):
        st.error("Ch∆∞a c·∫•u h√¨nh `EMAIL_USER` v√† `EMAIL_PASS` trong file `.env`. Vui l√≤ng c·∫•u h√¨nh ƒë·ªÉ s·ª≠ d·ª•ng ch·ª©c nƒÉng n√†y.")
    else:
        if st.button("üöÄ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω h√†ng lo·∫°t"):
            try:
                with st.spinner("B∆∞·ªõc 1/3: ƒêang k·∫øt n·ªëi ƒë·∫øn email v√† t√¨m ki·∫øm CV..."):
                    fetcher = EmailFetcher(host=EMAIL_HOST, port=EMAIL_PORT, user=EMAIL_USER, password=EMAIL_PASS)
                    fetcher.connect()
                    st.info("K·∫øt n·ªëi email th√†nh c√¥ng.")
                
                with st.spinner("B∆∞·ªõc 2/3: ƒêang x·ª≠ l√Ω c√°c CV t√¨m th·∫•y b·∫±ng AI..."):
                    processor = CVProcessor(fetcher)
                    # Thi·∫øt l·∫≠p model/provider cho processor
                    processor.llm_client = DynamicLLMClient(current_provider, current_model)
                    df = processor.process()
                
                with st.spinner("B∆∞·ªõc 3/3: ƒêang l∆∞u k·∫øt qu·∫£..."):
                    if not df.empty:
                        processor.save_to_csv(df, OUTPUT_CSV)
                        st.success(f"Ho√†n t·∫•t! ƒê√£ x·ª≠ l√Ω v√† l∆∞u {len(df)} h·ªì s∆° v√†o `{OUTPUT_CSV}`.")
                        
                        # X·ª≠ l√Ω d·ªØ li·ªáu ƒë·ªÉ tr√°nh l·ªói hi·ªÉn th·ªã
                        df_display = prepare_dataframe_for_display(df)
                        st.dataframe(df_display)
                    else:
                        st.warning("Kh√¥ng t√¨m th·∫•y CV m·ªõi ho·∫∑c kh√¥ng c√≥ CV n√†o ƒë·ªÉ x·ª≠ l√Ω.")

            except Exception as e:
                st.error(f"ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh x·ª≠ l√Ω: {e}")
                logging.error("L·ªói chi ti·∫øt:", exc_info=True)


# --- TAB 2: X·ª¨ L√ù FILE ƒê∆†N L·∫∫ ---
with tab2:
    st.header("Ki·ªÉm tra tr√≠ch xu·∫•t tr√™n m·ªôt file CV duy nh·∫•t")
    st.write("T·∫£i l√™n m·ªôt file `.pdf` ho·∫∑c `.docx` ƒë·ªÉ xem k·∫øt qu·∫£ tr√≠ch xu·∫•t c·ªßa AI ngay l·∫≠p t·ª©c.")
    
    uploaded_file = st.file_uploader("Ch·ªçn file CV...", type=["pdf", "docx"])

    if uploaded_file is not None:
        if st.button("‚ú® Tr√≠ch xu·∫•t th√¥ng tin t·ª´ file n√†y"):
            # L∆∞u file t·∫£i l√™n v√†o m·ªôt v·ªã tr√≠ t·∫°m th·ªùi
            temp_path = os.path.join(ATTACHMENT_DIR, f"temp_{uploaded_file.name}")
            with open(temp_path, "wb") as f:
                f.write(uploaded_file.getbuffer())

            try:
                with st.spinner("ƒêang ƒë·ªçc file v√† g·ªçi AI..."):
                    processor = CVProcessor() # Kh·ªüi t·∫°o kh√¥ng c·∫ßn fetcher
                    # Thi·∫øt l·∫≠p model/provider cho processor
                    processor.llm_client = DynamicLLMClient(current_provider, current_model)
                    text = processor.extract_text(temp_path)
                    
                    if not text or not text.strip():
                        st.error("Kh√¥ng th·ªÉ ƒë·ªçc ƒë∆∞·ª£c n·ªôi dung vƒÉn b·∫£n t·ª´ file n√†y.")
                    else:
                        info = processor.extract_info_with_llm(text)
                        st.success("Tr√≠ch xu·∫•t th√†nh c√¥ng!")
                        st.json(info)
            except Exception as e:
                st.error(f"ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω file: {e}")
                logging.error("L·ªói chi ti·∫øt:", exc_info=True)
            finally:
                # D·ªçn d·∫πp file t·∫°m sau khi x·ª≠ l√Ω xong
                if os.path.exists(temp_path):
                    os.remove(temp_path)

# --- TAB 3: XEM K·∫æT QU·∫¢ ---
with tab3:
    st.header(f"Xem v√† t·∫£i file k·∫øt qu·∫£: `{OUTPUT_CSV}`")
    
    if os.path.exists(OUTPUT_CSV):
        try:
            df_results = pd.read_csv(OUTPUT_CSV)
            # X·ª≠ l√Ω d·ªØ li·ªáu tr∆∞·ªõc khi hi·ªÉn th·ªã
            df_display = prepare_dataframe_for_display(df_results)
            st.dataframe(df_display)
            
            # Cung c·∫•p n√∫t t·∫£i v·ªÅ
            with open(OUTPUT_CSV, "rb") as f:
                st.download_button(
                    label="üì• T·∫£i v·ªÅ file CSV",
                    data=f,
                    file_name=OUTPUT_CSV,
                    mime='text/csv',
                )
        except Exception as e:
            st.error(f"Kh√¥ng th·ªÉ ƒë·ªçc file {OUTPUT_CSV}: {e}")
    else:
        st.warning(f"File k·∫øt qu·∫£ `{OUTPUT_CSV}` ch∆∞a t·ªìn t·∫°i. H√£y ch·∫°y quy tr√¨nh x·ª≠ l√Ω ·ªü tab ƒë·∫ßu ti√™n.")