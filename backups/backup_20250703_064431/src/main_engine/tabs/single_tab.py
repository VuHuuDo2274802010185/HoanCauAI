"""Tab x·ª≠ l√Ω t·ª´ng file CV ri√™ng l·∫ª."""

import logging
from pathlib import Path
import streamlit as st

from modules.cv_processor import CVProcessor
from modules.config import get_model_price
from modules.dynamic_llm_client import DynamicLLMClient


def render(provider: str, model: str, api_key: str, root: Path) -> None:
    """Render UI for processing a single CV file."""
    st.subheader("X·ª≠ l√Ω m·ªôt CV ƒë∆°n l·∫ª")
    price = get_model_price(model)
    label = f"{model} ({price})" if price != "unknown" else model
    st.markdown(f"**LLM:** `{provider}` / `{label}`")
    uploaded = st.file_uploader(
        "Ch·ªçn file CV (.pdf, .docx)",
        type=["pdf", "docx"],
        help="T·∫£i l√™n m·ªôt file CV ƒë·ªÉ ph√¢n t√≠ch ngay",
    )
    if uploaded:
        tmp_file = root / f"tmp_{uploaded.name}"
        tmp_file.write_bytes(uploaded.getbuffer())
        
        # T·∫°o progress bar v√† status text
        progress_bar = st.progress(0)
        status_text = st.empty()
        
        try:
            status_text.text(f"üîç ƒêang tr√≠ch xu·∫•t vƒÉn b·∫£n t·ª´ {uploaded.name}...")
            progress_bar.progress(0.3)
            
            logging.info(f"X·ª≠ l√Ω file ƒë∆°n {uploaded.name}")
            proc = CVProcessor(
                llm_client=DynamicLLMClient(
                    provider=provider,
                    model=model,
                    api_key=api_key,
                )
            )
            
            text = proc.extract_text(str(tmp_file))
            progress_bar.progress(0.6)
            status_text.text(f"ü§ñ ƒêang ph√¢n t√≠ch v·ªõi {provider}/{label}...")
            
            info = proc.extract_info_with_llm(text)
            progress_bar.progress(1.0)
            status_text.text("‚úÖ Ho√†n th√†nh ph√¢n t√≠ch!")
            
            # ·∫®n progress bar v√† status sau m·ªôt ch√∫t
            import time as time_module
            time_module.sleep(0.5)
            progress_bar.empty()
            status_text.empty()
            
        except Exception as e:
            progress_bar.empty()
            status_text.empty()
            st.error(f"L·ªói khi x·ª≠ l√Ω file: {e}")
            tmp_file.unlink(missing_ok=True)
            return
            
        st.json(info)
        tmp_file.unlink(missing_ok=True)
